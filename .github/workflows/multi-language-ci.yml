name: Multi-Language CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  detect-languages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Detect languages
        id: set-matrix
        run: |
          # Detect all language components
          COMPONENTS=$(find . -name "Cargo.toml" -o -name "go.mod" -o -name "CMakeLists.txt" -o -name "package.json" -o -name "pubspec.yaml" | xargs -I {} dirname {} | sort -u)
          
          # Build matrix JSON
          MATRIX_JSON='{"include":['
          FIRST=true
          
          for comp in $COMPONENTS; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              MATRIX_JSON="${MATRIX_JSON},"
            fi
            
            # Detect language for component
            if [ -f "$comp/Cargo.toml" ]; then
              LANG="rust"
              RUNNER="ubuntu-latest"
            elif [ -f "$comp/go.mod" ]; then
              LANG="go"
              RUNNER="ubuntu-latest"
            elif [ -f "$comp/CMakeLists.txt" ]; then
              LANG="cpp"
              RUNNER="ubuntu-latest"
            elif [ -f "$comp/package.json" ]; then
              LANG="node"
              RUNNER="ubuntu-latest"
            elif [ -f "$comp/pubspec.yaml" ]; then
              LANG="dart"
              RUNNER="ubuntu-latest"
            else
              LANG="unknown"
              RUNNER="ubuntu-latest"
            fi
            
            MATRIX_JSON="${MATRIX_JSON}{\"component\":\"${comp}\",\"language\":\"${LANG}\",\"runner\":\"${RUNNER}\"}"
          done
          
          MATRIX_JSON="${MATRIX_JSON}]}"
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT

  build-and-test:
    needs: detect-languages
    strategy:
      matrix: ${{fromJson(needs.detect-languages.outputs.matrix)}}
    runs-on: ${{ matrix.runner }}
    
    steps:
      - uses: actions/checkout@v3
      
      # Rust setup
      - name: Setup Rust
        if: matrix.language == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      # Go setup
      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      # C/C++ setup
      - name: Setup C/C++
        if: matrix.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc g++ clang-format
      
      # Node.js setup
      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      # Dart setup
      - name: Setup Dart
        if: matrix.language == 'dart'
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      
      # Build
      - name: Build
        working-directory: ${{ matrix.component }}
        run: |
          case "${{ matrix.language }}" in
            rust)
              cargo build --release
              ;;
            go)
              go build -v ./...
              ;;
            cpp)
              mkdir -p build && cd build
              cmake .. && make
              ;;
            node)
              npm ci
              npm run build || echo "No build script"
              ;;
            dart)
              dart pub get
              dart compile exe bin/main.dart || echo "No main.dart"
              ;;
          esac
      
      # Lint
      - name: Lint
        working-directory: ${{ matrix.component }}
        run: |
          case "${{ matrix.language }}" in
            rust)
              cargo fmt --check
              cargo clippy -- -D warnings
              ;;
            go)
              go fmt ./...
              go vet ./...
              ;;
            cpp)
              find . -name "*.cpp" -o -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || true
              ;;
            node)
              npm run lint || echo "No lint script"
              ;;
            dart)
              dart analyze
              dart format --set-exit-if-changed .
              ;;
          esac
      
      # Test
      - name: Test
        working-directory: ${{ matrix.component }}
        run: |
          case "${{ matrix.language }}" in
            rust)
              cargo test
              ;;
            go)
              go test -v ./...
              ;;
            cpp)
              cd build && ctest --output-on-failure || echo "No tests"
              ;;
            node)
              npm test || echo "No test script"
              ;;
            dart)
              dart test || echo "No tests"
              ;;
          esac
      
      # Coverage (optional)
      - name: Coverage
        if: github.event_name == 'push'
        working-directory: ${{ matrix.component }}
        run: |
          case "${{ matrix.language }}" in
            rust)
              cargo install cargo-tarpaulin
              cargo tarpaulin --out Xml
              ;;
            go)
              go test -coverprofile=coverage.out ./...
              ;;
            node)
              npm run coverage || echo "No coverage script"
              ;;
            dart)
              dart run coverage:test_with_coverage || echo "No coverage"
              ;;
          esac
        continue-on-error: true

  integration-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup integration environment
        run: |
          # Install all language toolchains needed for integration
          # This is a simplified version - customize as needed
          echo "Setting up integration test environment..."
      
      - name: Run integration tests
        run: |
          make all
          # Add your integration test commands here
          echo "Running integration tests..."
      
      - name: Generate combined coverage report
        run: |
          make coverage || echo "Coverage generation skipped"